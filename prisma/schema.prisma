// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
generator client {
  provider = "prisma-client-js"
}
enum Gender {
  MALE
  FEMALE
}
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  username  String
  gender    Gender?  
  role      Role     @default(USER)  // Using enum Role for type safety
  createdAt DateTime @default(now())
  bookings  Booking[]

  @@index([email]) // Index on email for faster querying
}

enum Role {
  USER
  ADMIN
}



enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}



enum HostelType {
  SINGLE
  SHARED
  DORMITORY
}


enum HostelGender {
  BOYS
  GIRLS
}

model Hostel { 
  id                String          @id @default(uuid())
  name              String
  price             Float
  hostelType        HostelType
  state             String
  city              String
  address           String
  about             String     
  images            String[]        
  gender            HostelGender
  isAvailable       Boolean         @default(true)
  isNonVeg          Boolean         @default(false)
  Almirah           Boolean         @default(false)
  attachedWashroom  Boolean         @default(false) 
  cctv              Boolean         @default(false)
  chair             Boolean         @default(false)
  cooler            Boolean         @default(false)
  inverterBackup    Boolean         @default(false) 
  parking           Boolean         @default(false)
  biweeklycleaning  Boolean         @default(false) //Rooms cleaned twice a week 
  allDayElectricity Boolean         @default(false) //24*7 electricity
  generator         Boolean         @default(false)
  geyser            Boolean         @default(false) 
  indoorGames       Boolean         @default(false)
  pillow            Boolean         @default(false)
  waterByRO         Boolean         @default(false)  //RO  Water 
  securityGuard     Boolean         @default(false)
  table             Boolean         @default(false)
  wiFi              Boolean         @default(false)
  foodIncluded      Boolean         @default(false)
  bed               Boolean         @default(false)
  vegetarienMess    Boolean         @default(false)
  allDayWaterSupply Boolean         @default(false) //24*7 water supply 
  gym               Boolean         @default(false)
  allDayWarden      Boolean         @default(false)
  airconditioner    Boolean         @default(false) 
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  bookings          Booking[]       // Relation to Booking model
  adminHostels      AdminHostel[]   // Many-to-many relation with Admin model
}



model Admin {
  id        String       @id @default(uuid())
  email     String       @unique
  password  String
  username  String
  role      Role         @default(ADMIN) // Using enum Role for type safety
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  hostels   AdminHostel[] 

  @@index([email]) 
}

model AdminHostel {
  id       String   @id @default(uuid())
  adminId  String
  hostelId String
  admin    Admin    @relation(fields: [adminId], references: [id])
  hostel   Hostel   @relation(fields: [hostelId], references: [id])
}

model Booking {
  id               String        @id @default(uuid())
  userId           String
  username         String?
  hostelName       String 
  hostelId         String
  status           BookingStatus @default(PENDING)
  referenceId      String        @unique // Unique booking reference for tracking
  phoneNumber      String
  userGender       Gender        // User's gender
  address          String        // User's address
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  user             User          @relation(fields: [userId], references: [id])
  hostel           Hostel        @relation(fields: [hostelId], references: [id])

  @@index([status]) // Index on status for faster querying by booking status
 
}

model AdminInsights {
  id                   String   @id @default(uuid())
  totalBookings        Int      @default(0)  // Track total bookings
  confirmedBookings    Int      @default(0)  // Track confirmed bookings
  cancelledBookings    Int      @default(0)  // Track cancelled bookings
  totalUsers           Int      @default(0)  // Track total users
  newUsersThisMonth    Int      @default(0)  // Track new users this month
  activeHostelsCount   Int      @default(0)  // Track active hostels (those with bookings)
  bookingConversionRate Float    @default(0)  // Confirmed bookings / Total bookings
  cancellationRate     Float    @default(0)  // Cancelled bookings / Total bookings
  avgBookingsPerUser   Float    @default(0)  // Average bookings per user
  trendingHostelId     String?  // ID of the trending hostel (highest bookings in last 30 days)
  listHostelRequests   Int      @default(0)  // Count of total "list your hostel" requests
  pendingRequests      Int      @default(0)  // Count of pending "list your hostel" requests
  cancelledRequests    Int      @default(0)  // Count of rejected "list your hostel" requests
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}



model ListHostelRequest {
  id               String   @id @default(uuid())
  userId           String   // ID of the user who requested to list their hostel
  ownerName        String   // Name of the hostel owner
  contactEmail     String   // Contact email of the owner
  contactPhone     String   // Contact phone number of the owner
  hostelName       String   // Name of the hostel they want to list
  state            String   // State where the hostel is located
  city             String   // City where the hostel is located
  address          String   // Address of the hostel
  message          String   // Additional details or message from the owner
  status           RequestStatus @default(PENDING) // Status of the request
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([status]) // Index on status for faster querying
}


enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}